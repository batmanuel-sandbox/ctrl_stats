==========
ctrl_stats
==========

Overview
========

This package contains commands to ingest Condor log files into databases.
Condor emits "records" of Condor events that happen during execution. The
ctrl_stats package commands group all of these records according to Condor
job id in order to get an overview of what happened during the job.  These 
records are then reduced into two tables, one that describes each submitted
dag node and one that describes all of the events that happens to each 
condor job id.  Note that the dag node can be submitted more than one time
for a variety of reasons.  All of this information is captured in the
database records.

==============
Usage
==============
The following commands are available:

condorLogIngest.py - Takes a list of log files and ingests them into a
database 

usage: condorLogIngest.py [-h] -H HOST [-p PORT] -d DATABASE -f FILENAMES
                          [FILENAMES ...] [-v]

example:
condorLogIngest.py -H lsst10 -d testing -f worker.log

-------------
condorDirectoryIngest - given a directory in ~/condor_scratch, take the
preJob, worker and postJob log files and add them into a database named
after the directory.

usage: condorDirectoryIngest -H HOST [-p PORT] -d directory

example:
condorDirectoryIngest -H lsst10 -p 3306 -d srp_2012_0925_160117

-------------
condorLogInfo.py - a debugging utility to view record groups.  This was used
as a debugging tool, but is useful in viewing records without having to 
do a complete database ingest.

usage: condorLogInfo.py [-h] [-v] [-c CONDORIDS [CONDORIDS ...]] -f FILENAMES
                        [FILENAMES ...]

example:
condorLogInfo.py -c 630.000.000 -f srp_2012_0925_160117/*nodes.log

----
report.py - a statistics reporting utility.  Use to print out information
about what happened during a run.  Takes as an argument previously ingested
run information (via one of the ingest utilities above) in a named database.

usage: report.py -H HOST [-p PORT] -d database_name [-S|I|C|N]

example:
report.py -H kaboom.ncsa.illinois.edu -p 3303 -d srp_2013_0601_140432 -S

==============
Notes extending lsst.ctrl.stats.records classes:
==============

These classes represent the information in Condor events (submitted, held,
evicted, terminated, etc).   All of these classes subclass from Record.

If new event types are added, they need to have the variables "eventClass"
and "eventCode" defined, and they need to be added to the __init__.py file.
This should allow the code to automatically register these classes so they'll
be created as the classifier code encounters them.  Additional parsing code
will likely need to be added for those classes.

See the other records and __init__.py for additional information.

==============
DbRecord classes
==============

The DbRecord subclasses: SubmissionsRecord, UpdatesRecord, TotalsRecord are
have member variables that are required to be matched to the columns in
their SQL table counterparts.  When creating insertion strings for these 
classes, the introspection code in DbRecord looks at member variables to
create the correct insertion string.  This was done to make it easier to
add new columns (or delete old ones) and still maintain the integrity of
the insert string, and to print out record values for debuggging.

-------------
Further information can be found here:

http://dev.lsstcorp.org/trac/wiki/Orchestration/Condor/Statistics
